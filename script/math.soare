
?
?  _____  _____  ___  ______ _____
? /  ___||  _  |/ _ \ | ___ \  ___|
? \ `--. | | | / /_\ \| |_/ / |__
?  `--. \| | | |  _  ||    /|  __|
? /\__/ /\ \_/ / | | || |\ \| |___
? \____/  \___/\_| |_/\_| \_\____/
?
? Antoine LANDRIEUX (MIT License) <math.soare>
? <https://github.com/AntoineLandrieux/SOARE/>
?
? Included Variables:
?   - pi
?   - deg
?   - rad
?
? Included Functions:
?   - M
?   - Math
?   - NaN
?   - abs
?   - not
?   - floor
?   - integer_division
?   - integer_sqrt
?   - pow
?   - factorial
?   - cos
?   - sin
?   - tan

let pi = 3.14159265;
let deg = 180 / pi;
let rad = pi / 180;

? Useful for math, ex: 5*M(1+2)
fn M(f)
  return f;
end;

? Useful for math, ex: 5*M(1+2)
fn Math(f)
  return f*1;
end;

? Returns true if a value is Not-a-Number
fn NaN(x)
  try
    x = x * 1;
  iferror
    return 1;
  end;
  return 0;
end;

? Absolute value
fn abs(x)
  if x < 0 do
    return x*M(0-1);
  end;
  return Math(x);
end;

? Invert the truth value of Boolean expressions
fn not(x)
  return x == 0;
end;

? Floating point to integer conversion
fn floor(float)
  return float^0;
end;

? Integer division
fn integer_division(x; y)
  let res = 0;
  while x >= y do
    x = x - y;
    res = res + 1;
  end;
  return res;
end;

fn round(x)
  let sign = x < 0;
  let y = abs(x);
  let t = floor(y);

  if sign do
    sign = 0 - 1;
  else
    sign = 1;
  end;

  if y - t >= 0.5 do
    return sign * M(t + 1);
  end;

  return sign * t;
end;

? Integer square root
fn integer_sqrt(x)
  x = round(x);

  if x == 0 do
    return 0;
  or x < 0 do
    raise "Non-Real Number";
  end;

  let n = x;
  let a = 0;

  while 1 do
    a = integer_division(n + integer_division(x; n); 2)
    if a == n do
      return n;
    end;
    n = a;
  end;
end;

? Returns the value of x to the power of y
fn pow(x; y)
  let res = 1;
  let neg = y < 0;

  y = floor(abs(y))

  while y do
    res = res * x;
    y = y - 1;
  end;

  if neg do
    res = 1 / res;
  end;

  return res;
end;

? The factorial of a non-negative integer
fn factorial(x)
  let res = 1;
  let n = 1;

  x = floor(x);
  if x < 0 do
    raise "Undefined";
  end;

  while n < x + 1 do
    res = res * n;
    n = n + 1;
  end;

  return res;
end;

? Convert Degrees to Radians
fn radians(x)
  return x * rad;
end;

? Convert Radians to Degrees
fn degrees(x)
  return x * deg;
end;

? The sine function
fn sin(x)
  let sine = 0;
  let n = 0;

  x = radians(x % 180)

  while n < 10 do
    sine = sine + pow(0-1; n) * pow(x; 2 * n + 1) / factorial(2 * n + 1);
    n = n + 1;
  end;

  return sine;
end;

? The cosine function
fn cos(x)
  let cosine = 0;
  let n = 0;

  x = radians(x % 180)

  while n < 10 do
    cosine = cosine + pow(0-1; n) * pow(x; 2 * n) / factorial(2 * n);
    n = n + 1;
  end;

  return cosine;
end;

? The tangent function
fn tan(x)
  return sin(x) / cos(x);
end;
